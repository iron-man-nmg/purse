<?xml version="1.0" encoding="UTF-8"?>

<!-- 实时写到mylog.log，每隔两分钟进行一次rollover，
    rollover策略为按照时间作为增量命名日志文件并压缩归档。-->
<Configuration>


    <properties>
        <Property name="filePath">
            /data/logs/apps/timetravel
        </Property>
        <Property name="logPattern">
            %d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5p %c{-2} - %m%n
        </Property>
    </properties>

    <Appenders>
        <!-- 便于在控制台观察实际输出情况 -->
        <Console name="STDOUT" target="SYSTEM_OUT">
            <PatternLayout>
                <Pattern>${logPattern}</Pattern>
            </PatternLayout>
        </Console>

        <!-- 大概可以视为RollingFileAppender的进化版，没

        有bufferedIO这个属性，对于RollingRandomAccessFile，
        缓存是固定开启的。fileName是实时写入的（未归档）文
        件名，filePattern则是归档文件的命名模式，因为开启了
         异步日志所以这里immediateFlush设置为false（不过好像
         不管它也无所谓），bufferSize缓冲区大小暂时默认，
         最后，TriggeringPolicy和RolloverStrategy是必须有的，
         没有显示定义就会采用默认的。-->
        <RollingFile  name="RollingRandomAccessFileInfo" fileName="${filePath}/info.log" immediateFlush="false"
                                  filePattern="${filePath}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-i%.log.zip">
            <!-- 生成的日志文件名要么按照时间来增长，filePattern中需要%d，
            要么就以整数增长，filePattern中需要%i，又或者两个搭配（意义似乎不是很大
            因为rollover一次计数器又从1开始了。。），文件名仅按照时间增长的话，
            RolloverStrategy设置max，min参数似乎也没多什么意义了。-->
            <!-- 如果filePattern以".gz", ".zip", ".bz2", ".deflate", ".pack200",或者".xz"结尾，
            那么将使用与相对应的压缩方案压缩生成的归档文件。-->
            <PatternLayout>
                <Pattern>%d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5p %c{-2} - %m%n</Pattern>
            </PatternLayout>
            <!--决定是否应该执行rollover，只要有任何一个
            policy返回true那么就进行rollover，rollover的
            意思大概可以理解为：当日志文件满足特定条件时
            将触发的事件，例如创建一个新的文件/把原有的文件
            归档/删除等，具体怎样rollover由RolloverStrategy
            决定 -->
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <!--<OnStartupTriggeringPolicy />-->
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="30 MB" />
                <!-- TimeBasedTriggeringPolicy是最多用到的Policy，
                interval默认值是1，根据filePattern中日期的最小单位，例如
                在该配置里是mm（分钟），设置interval="2"则每隔两分钟将发生
                一次rollover，按当前配置，具体表现就是隔两分钟得到一个log.zip。
                modulate就是让第一次rollover发生在区间边界上（即便还没到
                interval的时长），按照当前配置，首次rollover会发生在比如
                8点50分0秒，这样之后的rollover就是8点52分0秒、8点54分0秒..
                这样做的好处在于rollover的时机就变得很有规律很好预测，生成的
                文件还很整齐（假设时间最小单位为天，interval="1"，那么就
                变成稳定每天0点自动rollover了。。）。还有个属性叫maxRandomDelay，
                防止很多应用在同一时间一起rollover的，暂时不理它。
                  -->
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true" />-->
            </Policies>
            <Filters>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>

            </Filters>
            <!-- DefaultRolloverStrategy，默认rollover策略。参数：
            fileIndex有两个值，max和min，就是决定生成文件是从序号大的到
            序号小的，还是从序号小的到序号大。min，计数器的起始值，
             默认是1；max，计数器的最大值，默认是7。还有两个参数暂时不管。-->
            <DefaultRolloverStrategy/>
        </RollingFile>

        <RollingFile  name="RollingRandomAccessFileError" fileName="${filePath}/error.log" immediateFlush="false"
                                  filePattern="${filePath}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd-HH-mm}-i%.log.zip">
            <!-- 生成的日志文件名要么按照时间来增长，filePattern中需要%d，
            要么就以整数增长，filePattern中需要%i，又或者两个搭配（意义似乎不是很大
            因为rollover一次计数器又从1开始了。。），文件名仅按照时间增长的话，
            RolloverStrategy设置max，min参数似乎也没多什么意义了。-->
            <!-- 如果filePattern以".gz", ".zip", ".bz2", ".deflate", ".pack200",或者".xz"结尾，
            那么将使用与相对应的压缩方案压缩生成的归档文件。-->
            <PatternLayout>
                <Pattern>%d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5p %c{-2} - %m%n</Pattern>
            </PatternLayout>
            <!--决定是否应该执行rollover，只要有任何一个
            policy返回true那么就进行rollover，rollover的
            意思大概可以理解为：当日志文件满足特定条件时
            将触发的事件，例如创建一个新的文件/把原有的文件
            归档/删除等，具体怎样rollover由RolloverStrategy
            决定 -->
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <!--<OnStartupTriggeringPolicy />-->
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="30 MB" />
                <!-- TimeBasedTriggeringPolicy是最多用到的Policy，
                interval默认值是1，根据filePattern中日期的最小单位，例如
                在该配置里是mm（分钟），设置interval="2"则每隔两分钟将发生
                一次rollover，按当前配置，具体表现就是隔两分钟得到一个log.zip。
                modulate就是让第一次rollover发生在区间边界上（即便还没到
                interval的时长），按照当前配置，首次rollover会发生在比如
                8点50分0秒，这样之后的rollover就是8点52分0秒、8点54分0秒..
                这样做的好处在于rollover的时机就变得很有规律很好预测，生成的
                文件还很整齐（假设时间最小单位为天，interval="1"，那么就
                变成稳定每天0点自动rollover了。。）。还有个属性叫maxRandomDelay，
                防止很多应用在同一时间一起rollover的，暂时不理它。
                  -->
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true" />-->
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>

            </Filters>
            <!-- DefaultRolloverStrategy，默认rollover策略。参数：
            fileIndex有两个值，max和min，就是决定生成文件是从序号大的到
            序号小的，还是从序号小的到序号大。min，计数器的起始值，
             默认是1；max，计数器的最大值，默认是7。还有两个参数暂时不管。-->
            <DefaultRolloverStrategy/>
        </RollingFile>

        <RollingFile  name="RollingRandomAccessFileDebug" fileName="${filePath}/debug.log" immediateFlush="false"
                                  filePattern="${filePath}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd-HH-mm}-i%.log.zip">
            <!-- 生成的日志文件名要么按照时间来增长，filePattern中需要%d，
            要么就以整数增长，filePattern中需要%i，又或者两个搭配（意义似乎不是很大
            因为rollover一次计数器又从1开始了。。），文件名仅按照时间增长的话，
            RolloverStrategy设置max，min参数似乎也没多什么意义了。-->
            <!-- 如果filePattern以".gz", ".zip", ".bz2", ".deflate", ".pack200",或者".xz"结尾，
            那么将使用与相对应的压缩方案压缩生成的归档文件。-->
            <PatternLayout>
                <Pattern>%d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5p %c{-2} - %m%n</Pattern>
            </PatternLayout>
            <!--决定是否应该执行rollover，只要有任何一个
            policy返回true那么就进行rollover，rollover的
            意思大概可以理解为：当日志文件满足特定条件时
            将触发的事件，例如创建一个新的文件/把原有的文件
            归档/删除等，具体怎样rollover由RolloverStrategy
            决定 -->
            <Policies>
                <!-- jvm重启就进行一次rollover-->
                <!--<OnStartupTriggeringPolicy />-->
                <!-- 文件大小达到20mb进行一次rollover -->
                <SizeBasedTriggeringPolicy size="30 MB" />
                <!-- TimeBasedTriggeringPolicy是最多用到的Policy，
                interval默认值是1，根据filePattern中日期的最小单位，例如
                在该配置里是mm（分钟），设置interval="2"则每隔两分钟将发生
                一次rollover，按当前配置，具体表现就是隔两分钟得到一个log.zip。
                modulate就是让第一次rollover发生在区间边界上（即便还没到
                interval的时长），按照当前配置，首次rollover会发生在比如
                8点50分0秒，这样之后的rollover就是8点52分0秒、8点54分0秒..
                这样做的好处在于rollover的时机就变得很有规律很好预测，生成的
                文件还很整齐（假设时间最小单位为天，interval="1"，那么就
                变成稳定每天0点自动rollover了。。）。还有个属性叫maxRandomDelay，
                防止很多应用在同一时间一起rollover的，暂时不理它。
                  -->
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true" />-->
            </Policies>
            <Filters>
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>

            </Filters>
            <!-- DefaultRolloverStrategy，默认rollover策略。参数：
            fileIndex有两个值，max和min，就是决定生成文件是从序号大的到
            序号小的，还是从序号小的到序号大。min，计数器的起始值，
             默认是1；max，计数器的最大值，默认是7。还有两个参数暂时不管。-->
            <DefaultRolloverStrategy/>
        </RollingFile>
    </Appenders>

    <Loggers>
        <!-- 用来debug。只要additivity不设置为false，日志起码会被打印到控制台。-->
        <Root level="info">
            <AppenderRef ref="STDOUT"/>
            <AppenderRef ref="RollingRandomAccessFileInfo"/>
            <AppenderRef ref="RollingRandomAccessFileError"/>
            <AppenderRef ref="RollingRandomAccessFileDebug"/>
        </Root>
        <!-- 测试对象。将日志转发给RollingFileAppender -->
        <Logger name="com.zhuoqitech.timetravel.dal.mapper" level="debug" additivity="true">
            <AppenderRef ref="RollingRandomAccessFileDebug" />
        </Logger>
    </Loggers>

</Configuration>